service: typeup-app-api

plugins:
  - serverless-webpack

custom:
  webpackIncludeModules: true

provider:
  name: aws
  runtime: nodejs6.10
  stage: prod
  region: us-west-2

  # 'iamRoleStatement' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-west-2:*:*"


# resources:
#   dynamoDB table
#   S3 bucket
#   Cognito user pool (current pool arn: arn:aws:cognito-idp:us-west-2:402153944964:userpool/us-west-2_7TooDx4yJ)
#   Cognito App client (current id: 2sdk53svubdtll8gigcscjb0an)

functions:

  status-create:
    # Defines an HTTP API endpoint that calls the main function in create.js
    # - path: url path is /statuses
    # - method: POST request
    # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
    #     domain api call
    # - authorizer: authenticate using the AWS IAM role
    handler: status-create.main
    events:
      - http:
          path: statuses
          method: post
          # cors: true
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          authorizer: aws_iam

  status-get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /statuses/{statusId}
    # - method: GET request
    handler: status-get.main
    events:
      - http:
          path: statuses/{statusId}
          method: get
          cors: true
          authorizer: aws_iam

  status-list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /statuses
    # - method: GET request
    handler: status-list.main
    events:
      - http:
          path: statuses
          method: get
          # cors: true
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          authorizer: aws_iam

  status-update:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /statuses/{statusId}
    # - method: PUT request
    handler: status-update.main
    events:
      - http:
          path: statuses/{statusId}
          method: put
          # cors: true
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          authorizer: aws_iam

  status-delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /statuses/{statusId}
    # - method: DELETE request
    handler: status-delete.main
    events:
      - http:
          path: statuses/{statusId}
          method: delete
          # cors: true
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          authorizer: aws_iam

  users-list:
    handler: users-list.main
    events:
      - http:
          path: users
          method: get
          # cors: true
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          authorizer: aws_iam

  users-create:
    handler: users-create.main
    events:
      - http:
          path: users
          method: post
          # cors: true
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          authorizer: aws_iam
